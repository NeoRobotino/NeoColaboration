/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'war'
    id 'jacoco'
    id "com.github.spotbugs" version "4.5.0"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
     
    maven { url 'https://jitpack.io' }
    
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
    
    compile group: 'org.wildfly', name: 'wildfly-spec-api', version: '20.0.1.Final', ext: 'pom'
	
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	
	providedCompile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
	
	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
	
	compile group: 'org.apache.poi', name: 'poi', version: '4.1.2'
	
	compile 'com.github.bitsoex:bitso-java:v3.0.5'
	
	compile group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'
	
	compile group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
	
	compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.2'
	
	compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
	
	compile group: 'com.github.binance-exchange', name: 'binance-java-api', version:"master-SNAPSHOT"
	
}

war {
    from 'src/webapp' // adds a file-set to the root of the archive
    webXml = file('build/libs/web.xml') // copies a file to WEB-INF/web.xml
} 

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
            excludes = [
                'com.config.*'
            ]
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
           fileTree(dir: it, exclude: ['']
           			) }))
    }
}

tasks.matching {task -> task.name.startsWith('spotbugs')}.forEach {
    it.reports {
        html.enabled = true
        xml.enabled = false
    }
}


check.dependsOn('jacocoTestReport','jacocoTestCoverageVerification')